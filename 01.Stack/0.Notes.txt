# Link -> https://www.geeksforgeeks.org/stack-in-python/


# A stack is a linear data structure that stores items in a Last-In/First-Out (LIFO) or First-In/Last-Out (FILO) manner. In stack,
 a new element is added at one end and an element is removed from that end only. The insert and delete operations are often called push and pop.

# LIFO is an abbreviation for last in,
 first out. It is a method for handling data structures where the first element is processed last and the last element is processed first.
    Time Complexity: O(n) -> linear
    Auxiliary Space: O(n) -> linear


# The functions associated with stack are:

    empty() – Returns whether the stack is empty – Time Complexity: O(1)
    size() – Returns the size of the stack – Time Complexity: O(1)
    top() / peek() – Returns a reference to the topmost element of the stack – Time Complexity: O(1)
    push(a) – Inserts the element ‘a’ at the top of the stack – Time Complexity: O(1)
    pop() – Deletes the topmost element of the stack – Time Complexity: O(1)

    - All contant Time

# Implementation:
    There are various ways from which a stack can be implemented in Python.
     This article covers the implementation of a stack using data structures and modules from the Python library.
    Stack in Python can be implemented using the following ways:

    list
    Collections.deque
    queue.LifoQueue

# Dictionary
    Dictionaries are used to store data values in key:value pairs.
    A dictionary is a collection which is ordered*, changeable and do not allow duplicates.
    As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.
    Dictionaries are written with curly brackets, and have keys and values:

        thisdict = {
          "brand": "Ford",
          "model": "Mustang",
          "year": 1964
        }
