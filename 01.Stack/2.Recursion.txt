# What is recursion?
Recursion is the process of defining something in terms of itself.

A physical world example would be to place two parallel mirrors facing each other.
 Any object in between them would be reflected recursively.


# Python Recursive Function
In Python, we know that a function can call other functions.
 It is even possible for the function to call itself. These types of construct are termed as recursive functions.


# Following is an example of a recursive function to find the factorial of an integer.

    def factorial(x):
        """This is a recursive function
        to find the factorial of an integer"""

        if x == 1:
            return 1
        else:
            return (x * factorial(x-1))


# Every recursive function must have a base condition that stops the recursion or else the function calls itself infinitely.


# The Python interpreter limits the depths of recursion to help avoid infinite recursions, resulting in stack overflows.
By default, the maximum depth of recursion is 1000. If the limit is crossed, it results in RecursionError. Let's look at one such condition.



# Advantages of Recursion
        1.Recursive functions make the code look clean and elegant.
        2.A complex task can be broken down into simpler sub-problems using recursion.
        3.Sequence generation is easier with recursion than using some nested iteration.

# Disadvantages of Recursion
    1.Sometimes the logic behind recursion is hard to follow through.
    2.Recursive calls are expensive (inefficient) as they take up a lot of memory and time.
    3.Recursive functions are hard to debug.
