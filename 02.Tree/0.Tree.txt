# What is a Tree data structure?
    A tree is non-linear and a hierarchical data structure
     consisting of a collection of nodes such that each node of the tree stores a value and a list of references to other nodes (the “children”).


# This data structure is a specialized method to organize and store data in the computer to be used more effectively.
 It consists of a central node, structural nodes, and sub-nodes,
 which are connected via edges. We can also say that tree data structure has roots, branches, and leaves connected with one another.

# Recursive Definition:
A tree consists of a root, and zero or more subtrees T1, T2, … , Tk such that there is an edge from the root of the tree to the root of each subtree.



# Basic Terminologies In Tree Data Structure:
    1.Parent Node: The node which is a predecessor of a node is called the parent node of that node.
    2.Child Node: The node which is the immediate successor of a node is called the child node of that node.
    3.Root Node: The topmost node of a tree or the node which does not have any parent node is called the root node.
    4.Leaf Node or External Node: The nodes which do not have any child nodes are called leaf nodes.
    5.Ancestor of a Node: Any predecessor nodes on the path of the root to that node are called Ancestors of that node.
    6.Descendant: Any successor node on the path from the leaf node to that node.
    7.Sibling: Children of the same parent node are called siblings.
    8.Level of a node: The count of edges on the path from the root node to that node.
    9.Internal node: A node with at least one child is called Internal Node.
    10.Neighbour of a Node: Parent or child nodes of that node are called neighbors of that node.
    11.Subtree: Any node of the tree along with its descendant.


# Properties of a Tree:
    1.Number of edges: An edge can be defined as the connection between two nodes. If a tree has N nodes then it will have (N-1) edges.
    2.Depth of a node: The depth of a node is defined as the length of the path from the root to that node. Each edge adds 1 unit of length to the path. So,
     it can also be defined as the number of edges in the path from the root of the tree to the node.
    3.Height of a node: The height of a node can be defined as the length of the longest path from the node to a leaf node of the tree.
    4.Height of the Tree: The height of a tree is the length of the longest path from the root of the tree to a leaf node of the tree.
    5.Degree of a Node: The total count of subtrees attached to that node is called the degree of the node.
     The degree of a leaf node must be 0. The degree of a tree is the maximum degree of a node among all the nodes in the tree.
    6.Traversing in a tree is done by depth first search and breadth first search algorithm.
    7.It has no loop and no circuit
    8.It has no self-loop
    9.Its hierarchical model.F


# Syntax:
        struct Node
        {
           int data;
           struct Node *left_child;
           struct Node *right_child;
        };


# Basic Operation Of Tree:

    Create – create a tree in data structure.
    Insert − Inserts data in a tree.
    Search − Searches specific data  in a tree to check it is present or not.
    Preorder Traversal – perform Traveling a tree in a pre-order manner in data structure .
    In order Traversal – perform Traveling a tree in an in-order manner.
    Post order Traversal –perform Traveling a tree in a post-order manner.

# Types of Tree data structures

    1. General tree
        A general tree data structure has no restriction on the number of nodes. It means that a parent node can have any number of child nodes.

    2. Binary tree
        A node of a binary tree can have a maximum of two child nodes.

    3. Balanced tree
        f the height of the left sub-tree and the right sub-tree is equal or differs at most by 1, the tree is known as a balanced tree.

    4. Binary search tree
        As the name implies, binary search trees are used for various searching and sorting algorithms. The examples include AVL tree and red-black tree.


# Applications of Tree data structure:

    1. Spanning trees: It is the shortest path tree used in the routers to direct the packets to the destination
    2. Binary Search Tree: It is a type of tree data structure that helps in maintaining a sorted stream of data.

        Full Binary tree
        Complete Binary tree
        Skewed Binary tree
        Stickily Binary tree
        Extended Binary tree

    3. Storing hierarchical data: Tree data structures are used to store the hierarchical data, which means data is arranged in the form of order.
    4. Syntax tree: The syntax tree represents the structure of the program’s source code, which is used in compilers.
    5. Trie: It is a fast and efficient way for dynamic spell checking. It is also used for locating specific keys from within a set.
    6. Heap: It is also a tree data structure that can be represented in a form of an array. It is used to implement priority queues.